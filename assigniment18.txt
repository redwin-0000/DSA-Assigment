#################################################################################
Question 1
Given an arrayÂ ofÂ intervalsÂ whereÂ intervals[i] = [starti, endi], merge all overlapping intervals, and returnÂ an array of the non-overlapping intervals that cover all the intervals in the input


Answer 1
function mergeIntervals(intervals) {
  intervals.sort((a, b) => a[0] - b[0]);
  let mergedIntervals = [];
  let currentInterval = intervals[0];
  for (let i = 1; i < intervals.length; i++) {
    if (currentInterval[1] >= intervals[i][0]) {
      currentInterval[1] = Math.max(currentInterval[1], intervals[i][1]);
    } else {
      mergedIntervals.push(currentInterval);
      currentInterval = intervals[i];
    }
  }
  mergedIntervals.push(currentInterval);
  return mergedIntervals;
}




#################################################################################
#################################################################################
Question 2
Given an arrayÂ `nums`Â withÂ `n`Â objects colored red, white, or blue, sort themÂ **[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)**Â so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integersÂ `0`,Â `1`, andÂ `2`Â to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function


Answer 2

function sortColors(nums) {
  let redIndex = 0;
  let whiteIndex = 0;
  let blueIndex = nums.length - 1;

  while (whiteIndex <= blueIndex) {
    switch (nums[whiteIndex]) {
      case 0:
        [nums[whiteIndex], nums[redIndex]] = [nums[redIndex], nums[whiteIndex]];
        redIndex++;
        whiteIndex++;
        break;
      case 1:
        whiteIndex++;
        break;
      case 2:
        [nums[whiteIndex], nums[blueIndex]] = [nums[blueIndex], nums[whiteIndex]];
        blueIndex--;
        break;
    }
  }
}


#################################################################################
#################################################################################
Question 3

You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you haveÂ `n`Â versionsÂ `[1, 2, ..., n]`Â and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an APIÂ `bool isBadVersion(version)`Â which returns whetherÂ `version`Â is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

Answer 3

function findFirstBadVersion(n) {
  let left = 1;
  let right = n;
  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    if (isBadVersion(mid)) {
      right = mid - 1;
    } else {
      left = mid + 1;
    }
  }

  return left;
}
#################################################################################
#################################################################################
Question 4
Given an integer arrayÂ `nums`, returnÂ *the maximum difference between two successive elements in its sorted form*. If the array contains less than two elements, returnÂ `0`.

You must write an algorithm that runs in linear time and uses linear extra space.

Answer 4

function maxDiffInSortedArray(nums) {
  let maxDiff = 0;
  let prev = nums[0];
  for (let i = 1; i < nums.length; i++) {
    if (nums[i] - prev > maxDiff) {
      maxDiff = nums[i] - prev;
    }
    prev = nums[i];
  }

  return maxDiff;
}

#################################################################################
#################################################################################
Question 5
ðŸ’¡ **Contains Duplicate**

Given an integer arrayÂ `nums`, returnÂ `true`Â if any value appearsÂ **at least twice**Â in the array, and returnÂ `false`Â if every element is distinct.

Answer 5

function containsDuplicate(nums) {
  const seen = new Set();
  for (let num of nums) {
    if (seen.has(num)) {
      return true;
    }
    seen.add(num);
  }

  return false;
}



#################################################################################
#################################################################################
Question 6
There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer arrayÂ `points`Â whereÂ `points[i] = [xstart, xend]`Â denotes a balloon whoseÂ **horizontal diameter**Â stretches betweenÂ `xstart`Â andÂ `xend`. You do not know the exact y-coordinates of the balloons.

Arrows can be shot upÂ **directly vertically**Â (in the positive y-direction) from different points along the x-axis. A balloon withÂ `xstart`Â andÂ `xend`Â isÂ **burst**Â by an arrow shot atÂ `x`Â ifÂ `xstart <= x <= xend`. There isÂ **no limit**Â to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the arrayÂ `points`, returnÂ *theÂ **minimum**Â number of arrows that must be shot to burst all balloons*.

Answer 6
function minArrowsToBurstBalloons(points) {
  let arrows = 0;
  let prevEnd = -1;
  for (let [xstart, xend] of points) {
    if (xstart > prevEnd) {
      arrows++;
      prevEnd = xend;
    } else {
      prevEnd = Math.min(prevEnd, xend);
    }
  }

  return arrows;
}
#################################################################################
#################################################################################
Question 7
Given an integer arrayÂ `nums`, returnÂ *the length of the longestÂ **strictly increasing***

***subsequence***
Answer 7

function longestIncreasingSubsequence(nums) {
  const dp = new Array(nums.length);
  for (let i = 0; i < nums.length; i++) {
    dp[i] = 1;
    for (let j = 0; j < i; j++) {
      if (nums[j] < nums[i] && dp[j] + 1 > dp[i]) {
        dp[i] = dp[j] + 1;
      }
    }
  }

  let max = 0;
  for (let i = 0; i < nums.length; i++) {
    if (max < dp[i]) {
      max = dp[i];
    }
  }

  return max;
}

#################################################################################
#################################################################################

Question 8 Given an array ofÂ `n`Â integersÂ `nums`, aÂ **132 pattern**Â is a subsequence of three integersÂ `nums[i]`,Â `nums[j]`Â andÂ `nums[k]`Â such thatÂ `i < j < k`Â andÂ `nums[i] < nums[k] < nums[j]`.

ReturnÂ `true`Â *if there is aÂ **132 pattern**Â in*Â `nums`*, otherwise, return*Â `false`*.*

Answer 8

function find132Pattern(nums) {
  let smaller = -Infinity;
  for (let i = nums.length - 1; i >= 0; i--) {
    if (nums[i] > smaller) {
      for (let j = i + 1; j < nums.length; j++) {
        if (nums[j] < nums[i] && nums[j] > smaller) {
          return true;
        }
      }
    }
    smaller = Math.min(smaller, nums[i]);
  }

  return false;
}

#################################################################################
