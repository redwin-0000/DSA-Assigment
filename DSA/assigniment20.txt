#################################################################################
Question 1

Given a binary tree, your task is to find subtree with maximum sum in tree.

Examples:

Input1 :       

       1

     /   \

   2      3

  / \    / \

4   5  6   7

Output1 : 28

As all the tree elements are positive, the largest subtree sum is equal to sum of all tree elements.

Input2 :

       1

     /    \

  -2      3

  / \    /  \

4   5  -6   2

Output2 : 7

Subtree with largest sum is :

 -2

 / \

4   5

Also, entire tree sum is also 7.


Answer 1

function findMaxSubtreeSum(root) {
  let maxSum = -Infinity;
  let maxSubtree = null;

  function dfs(node) {
    if (!node) {
      return 0;
    }

    let leftSum = dfs(node.left);
    let rightSum = dfs(node.right);
    let sum = node.val + leftSum + rightSum;

    if (sum > maxSum) {
      maxSum = sum;
      maxSubtree = node;
    }

    return sum;
  }

  dfs(root);
  return maxSubtree;
}

#################################################################################
Question 2
Construct the BST (Binary Search Tree) from its given level order traversal.

Example:

Input: arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}

Output: BST:

            7

         /    \

       4     12

     /  \     /

    3   6  8

   /    /     \

 1    5      10

Answer 2

function constructBST(arr) {
  const root = new TreeNode(arr[0]);
  const queue = [root];
  for (let i = 1; i < arr.length; i++) {
    const node = queue.shift();
    const left = arr[i];
    if (left < node.val) {
      node.left = new TreeNode(left);
      queue.push(node.left);
    } else {
      node.right = new TreeNode(left);
      queue.push(node.right);
    }
  }

  return root;
}
#################################################################################
#################################################################################
Question 3
Given an array of size n. The problem is to check whether the given array can represent the level order traversal of a Binary Search Tree or not.

Examples:

Input1 : arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}

Output1 : Yes

For the given arr[], the Binary Search Tree is:

            7

         /    \

       4     12

     /  \     /

    3   6  8

   /    /     \

 1    5      10

Input2 : arr[] = {11, 6, 13, 5, 12, 10}


Answer 3

function isLevelOrderTraversalOfBST(arr) {
  let prev = arr[0];
  for (let i = 1; i < arr.length; i++) {
    if (prev > arr[i]) {
      return false;
    }
    while (i < arr.length - 1 && arr[i] == arr[i + 1]) {
      i++;
    }
    prev = arr[i];
  }
  return true;
}
#################################################################################
