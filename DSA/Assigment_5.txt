Question :1


Convert 1D Array Into 2D Array

You are given a **0-indexed** 1-dimensional (1D) integer array original, and two integers, m and n. You are tasked with creating a 2-dimensional (2D) array with Â m rows and n columns using **all** the elements from original.

The elements from indices 0 to n - 1 (**inclusive**) of original should form the first row of the constructed 2D array, the elements from indices n to 2 * n - 1 (**inclusive**) should form the second row of the constructed 2D array, and so on.

Return *an* m x n *2D array constructed according to the above procedure, or an empty 2D array if it is impossible*.



///////
Answer

function construct2DArray(original, m, n) {
  if (original.length !== m * n) {
    return [];
  }

  let result = [];
  for (let i = 0; i < m; i++) {
    result.push(original.slice(i * n, i * n + n));
  }

  return result;
}

let original = [1, 2, 3, 4];
let m = 2;
let n = 2;
console.log(construct2DArray(original, m, n));


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



Question :2

You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase **may be** incomplete.

Given the integer n, return *the number of **complete rows** of the staircase you will build*.




///////
Answer

function arrangeCoins(n) {
  let row = 1;
  while (n >= row) {
    n -= row;
    row++;
  }
  return row - 1;
}

let n = 5;
console.log(arrangeCoins(n));


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Question :3

Given an integer array nums sorted in **non-decreasing** order, return *an array of **the squares of each number** sorted in non-decreasing order*.



///////
Answer

function sortedSquares(nums) {
  const result = [];

  // Square each number and store them in the result array
  for (let num of nums) {
    result.push(num * num);
  }

  // Sort the squared numbers in non-decreasing order
  result.sort((a, b) => a - b);

  return result;
}

// Example usage
const nums = [-4, -1, 0, 3, 10];
const result = sortedSquares(nums);
console.log(result); // Output: [0, 1, 9, 16, 100]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Question :4

Given two **0-indexed** integer arrays nums1 and nums2, return *a list* answer *of size* 2 *where:*

- answer[0] *is a list of all **distinct** integers in* nums1 *which are **not** present in* nums2*.*
- answer[1] *is a list of all **distinct** integers in* nums2 *which are **not** present in* nums1.


///////
Answer


function arraysDifferences(nums1, nums2) {
  const set1 = new Set(nums1);
  const set2 = new Set(nums2);
  const result = [[], []];

  // Find distinct integers in nums1 that are not present in nums2
  for (let num of set1) {
    if (!set2.has(num)) {
      result[0].push(num);
    }
  }

  // Find distinct integers in nums2 that are not present in nums1
  for (let num of set2) {
    if (!set1.has(num)) {
      result[1].push(num);
    }
  }

  return result;
}

// Example usage
const nums1 = [1, 2, 3];
const nums2 = [2, 4, 6];
const result = arraysDifferences(nums1, nums2);
console.log(result); // Output: [[1, 3], [4, 6]]



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Question :5

Given two integer arrays arr1 and arr2, and the integer d, *return the distance value between the two arrays*.

The distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.




///////
Answer

function findTheDistanceValue(arr1, arr2, d) {
  let count = 0;

  for (let num1 of arr1) {
    let valid = true;

    for (let num2 of arr2) {
      if (Math.abs(num1 - num2) <= d) {
        valid = false;
        break;
      }
    }

    if (valid) {
      count++;
    }
  }

  return count;
}

// Example usage
const arr1 = [4, 5, 8];
const arr2 = [10, 9, 1, 8];
const d = 2;
const result = findTheDistanceValue(arr1, arr2, d);
console.log(result); // Output: 2



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Question :6

Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears **once** or **twice**, return *an array of all the integers that appears **twice***.

You must write an algorithm that runs in O(n) time and uses only constant extra space.




///////
Answer

function findDuplicates(nums) {
  const result = [];


  for (let num of nums) {
    const index = Math.abs(num) - 1;

    // If the element at index is negative, it means we have seen it before
    if (nums[index] < 0) {
      result.push(Math.abs(num));
    }


    nums[index] = -nums[index];
  }

  return result;
}


const nums = [4, 3, 2, 7, 8, 2, 3, 1];
const result = findDuplicates(nums);
console.log(result); // Output: [2, 3]


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



\Question :7

Suppose an array of length n sorted in ascending order is **rotated** between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

- [4,5,6,7,0,1,2] if it was rotated 4 times.
- [0,1,2,4,5,6,7] if it was rotated 7 times.

Notice that **rotating** an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of **unique** elements, return *the minimum element of this array*.

You must write an algorithm that runs in O(log n) time.




///////
Answer

function findMin(nums) {
  let left = 0;
  let right = nums.length - 1;


  if (nums[left] <= nums[right]) {
    return nums[left];
  }


  while (left < right) {
    let mid = Math.floor((left + right) / 2);

    // Check if the mid element is smaller than its previous element
    if (nums[mid] < nums[mid - 1]) {
      return nums[mid];
    }


    if (nums[mid] >= nums[left]) {
      left = mid + 1;
    } else {
      right = mid;
    }
  }

  return nums[left];
}


const nums = [3, 4, 5, 1, 2];
const result = findMin(nums);
console.log(result); // Output: 1


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



Question :8


An integer array original is transformed into a **doubled** array changed by appending **twice the value** of every element in original, and then randomly **shuffling** the resulting array.

Given an array changed, return original *if* changed *is a **doubled** array. If* changed *is not a **doubled** array, return an empty array. The elements in* original *may be returned in **any** order*.



///////
Answer

function findOriginalArray(changed) {
  const count = {};
  
  for (let num of changed) {
    count[num] = (count[num] || 0) + 1;
  }
  
  const original = [];
  
  for (let num of changed) {
    const double = num * 2;
    
    if (!count[double]) {
      return [];
    }
    
    original.push(num);
    count[double]--;
  }
  
  return original;
}


const changed = [1, 3, 4, 2, 6, 8];
console.log(findOriginalArray(changed));


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
