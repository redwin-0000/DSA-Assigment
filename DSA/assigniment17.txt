#################################################################################
Question 1
Given a stringÂ s,Â find the first non-repeating character in it and return its index. If it does not exist, returnÂ -1

Answer 1

function firstUniqChar(s) {
    const charCount = {};
    for (let i = 0; i < s.length; i++) {
        if (charCount.hasOwnProperty(s[i])) {
            charCount[s[i]]++;
        } else {
            charCount[s[i]] = 1;
        }
    }
    for (let i = 0; i < s.length; i++) {
        if (charCount[s[i]] === 1) {
            return i;
        }
    }
    return -1;
}


#################################################################################
#################################################################################
Question 2

Given aÂ **circular integer array**Â `nums`Â of lengthÂ `n`, returnÂ *the maximum possible sum of a non-emptyÂ **subarray**Â of*Â `nums`.

AÂ **circular array**Â means the end of the array connects to the beginning of the array. Formally, the next element ofÂ `nums[i]`Â isÂ `nums[(i + 1) % n]`Â and the previous element ofÂ `nums[i]`Â isÂ `nums[(i - 1 + n) % n]`.

AÂ **subarray**Â may only include each element of the fixed bufferÂ `nums`Â at most once. Formally, for a subarrayÂ `nums[i], nums[i + 1], ..., nums[j]`, there does not existÂ `i <= k1`,Â `k2 <= j`Â withÂ `k1 % n == k2 % n`.

Answer 2

function maxSubarraySumCircular(nums) {
    let maxSum = nums[0];
    let currentMax = nums[0];
    let minSum = nums[0];
    let currentMin = nums[0];
    let totalSum = nums[0];
    
    for (let i = 1; i < nums.length; i++) {
        currentMax = Math.max(nums[i], currentMax + nums[i]);
        maxSum = Math.max(maxSum, currentMax);
        
        currentMin = Math.min(nums[i], currentMin + nums[i]);
        minSum = Math.min(minSum, currentMin);
        
        totalSum += nums[i];
    }
    
    if (totalSum === minSum) {
        return maxSum;
    }
    
    return Math.max(maxSum, totalSum - minSum);
}

#################################################################################
#################################################################################

Question 3
ðŸ’¡

The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbersÂ `0`Â andÂ `1`Â respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.

The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in aÂ **stack**. At each step:

- If the student at the front of the queueÂ **prefers**Â the sandwich on the top of the stack, they willÂ **take it**Â and leave the queue.
- Otherwise, they willÂ **leave it**Â and go to the queue's end.

This continues until none of the queue students want to take the top sandwich and are thus unable to eat.

You are given two integer arraysÂ `students`Â andÂ `sandwiches`Â whereÂ `sandwiches[i]`Â is the type of theÂ `ith`Â sandwich in the stack (`i = 0`Â is the top of the stack) andÂ `students[j]`Â is the preference of theÂ `jth`Â student in the initial queue (`j = 0`Â is the front of the queue). ReturnÂ *the number of students that are unable to eat.*


Answer 3

function countStudents(students, sandwiches) {
    let count = 0;
    
    while (students.length > 0 && count < students.length) {
        if (students[0] === sandwiches[0]) {
            students.shift();
            sandwiches.shift();
            count = 0;
        } else {
            students.push(students.shift());
            count++;
        }
    }
    
    return count;
}
#################################################################################
#################################################################################
Question 4

You have aÂ `RecentCounter`Â class which counts the number of recent requests within a certain time frame.

Implement theÂ `RecentCounter`Â class:

- `RecentCounter()`Â Initializes the counter with zero recent requests.
- `int ping(int t)`Â Adds a new request at timeÂ `t`, whereÂ `t`Â represents some time in milliseconds, and returns the number of requests that has happened in the pastÂ `3000`Â milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive rangeÂ `[t - 3000, t]`.

It isÂ **guaranteed**Â that every call toÂ `ping`Â uses a strictly larger value ofÂ `t`Â than the previous call.

Answer 4

class RecentCounter {
  constructor() {
    this.queue = [];
  }

  ping(t) {
    this.queue.push(t);
    while (this.queue[0] < t - 3000) {
      this.queue.shift();
    }
    return this.queue.length;
  }
}



#################################################################################
#################################################################################
Question 5
There areÂ `n`Â friends that are playing a game. The friends are sitting in a circle and are numbered fromÂ `1`Â toÂ `n`Â inÂ **clockwise order**. More formally, moving clockwise from theÂ `ith`Â friend brings you to theÂ `(i+1)th`Â friend forÂ `1 <= i < n`, and moving clockwise from theÂ `nth`Â friend brings you to theÂ `1st`Â friend.

The rules of the game are as follows:

1. **Start**Â at theÂ `1st`Â friend.
2. Count the nextÂ `k`Â friends in the clockwise directionÂ **including**Â the friend you started at. The counting wraps around the circle and may count some friends more than once.
3. The last friend you counted leaves the circle and loses the game.
4. If there is still more than one friend in the circle, go back to stepÂ `2`Â **starting**Â from the friendÂ **immediately clockwise**Â of the friend who just lost and repeat.
5. Else, the last friend in the circle wins the game.

Given the number of friends,Â `n`, and an integerÂ `k`, returnÂ *the winner of the game*

Answer 5

function findWinner(n, k) {
  let currentFriend = 1;

  while (n > 1) {
    for (let i = 0; i < k; i++) {
      currentFriend = (currentFriend + 1) % n;
    }

    n--;

    currentFriend = (currentFriend + 1) % n;
  }

  return currentFriend;
}
#################################################################################
#################################################################################
Question 6
You are given an integer arrayÂ `deck`. There is a deck of cards where every card has a unique integer. The integer on theÂ `ith`Â card isÂ `deck[i]`.

You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.

You will do the following steps repeatedly until all cards are revealed:

1. Take the top card of the deck, reveal it, and take it out of the deck.
2. If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.
3. If there are still unrevealed cards, go back to step 1. Otherwise, stop.

ReturnÂ *an ordering of the deck that would reveal the cards in increasing order*.

**Note**Â that the first entry in the answer is considered to be the top of the deck.

Answer 6

function findOrder(deck) {
  const stack = [];
  const revealed = [];

  for (const card of deck) {
    if (!revealed.includes(card)) {
      revealed.push(card);
      stack.push(card);
    } else {
      stack.push(card);
    }
  }

  stack.reverse();
  return stack;
}


#################################################################################
#################################################################################
Question 7

Design a queue that supportsÂ `push`Â andÂ `pop`Â operations in the front, middle, and back.

Implement theÂ `FrontMiddleBack`Â class:

- `FrontMiddleBack()`Â Initializes the queue.
- `void pushFront(int val)`Â AddsÂ `val`Â to theÂ **front**Â of the queue.
- `void pushMiddle(int val)`Â AddsÂ `val`Â to theÂ **middle**Â of the queue.
- `void pushBack(int val)`Â AddsÂ `val`Â to theÂ **back**Â of the queue.
- `int popFront()`Â Removes theÂ **front**Â element of the queue and returns it. If the queue is empty, returnÂ `1`.
- `int popMiddle()`Â Removes theÂ **middle**Â element of the queue and returns it. If the queue is empty, returnÂ `1`.
- `int popBack()`Â Removes theÂ **back**Â element of the queue and returns it. If the queue is empty, returnÂ `1`.

**Notice**Â that when there areÂ **two**Â middle position choices, the operation is performed on theÂ **frontmost**Â middle position choice. For example:

- PushingÂ `6`Â into the middle ofÂ `[1, 2, 3, 4, 5]`Â results inÂ `[1, 2, 6, 3, 4, 5]`.
- Popping the middle fromÂ `[1, 2, 3, 4, 5, 6]`Â returnsÂ `3`Â and results inÂ `[1, 2, 4, 5, 6]`.


Answer 7

class FrontMiddleBack {
  constructor() {
    this.queue = [];
    this.middle = null;
  }

  pushFront(val) {
    this.queue.unshift(val);
    if (this.queue.length % 2 === 0) {
      this.middle = this.queue[this.queue.length / 2];
    }
  }

  pushMiddle(val) {
    this.queue.splice(this.queue.length / 2, 0, val);
    this.middle = this.queue[this.queue.length / 2];
  }

  pushBack(val) {
    this.queue.push(val);
    if (this.queue.length % 2 === 1) {
      this.middle = this.queue[this.queue.length / 2];
    }
  }

  popFront() {
    if (!this.queue.length) {
      return 1;
    }

    const val = this.queue.shift();
    if (val === this.middle) {
      this.middle = this.queue[this.queue.length / 2];
    }

    return val;
  }

  popMiddle() {
    if (!this.queue.length) {
      return 1;
    }

    const val = this.queue[this.queue.length / 2];
    this.queue.splice(this.queue.length / 2, 1);
    if (val === this.middle) {
      this.middle = null;
    }

    return val;
  }

  popBack() {
    if (!this.queue.length) {
      return 1;
    }

    const val = this.queue.pop();
    if (val === this.middle) {
      this.middle = null;
    }

    return val;
  }
}


#################################################################################
#################################################################################
Question 8
For a stream of integers, implement a data structure that checks if the lastÂ `k`Â integers parsed in the stream areÂ **equal**Â toÂ `value`.

Implement theÂ **DataStream**Â class:

- `DataStream(int value, int k)`Â Initializes the object with an empty integer stream and the two integersÂ `value`Â andÂ `k`.
- `boolean consec(int num)`Â AddsÂ `num`Â to the stream of integers. ReturnsÂ `true`Â if the lastÂ `k`Â integers are equal toÂ `value`, andÂ `false`Â otherwise. If there are less thanÂ `k`Â integers, the condition does not hold true, so returnsÂ `false`

Answer 8

class DataStream {
  constructor(value, k) {
    this.value = value;
    this.k = k;
    this.stream = [];
  }

  consec(num) {
    this.stream.push(num);
    if (this.stream.length < this.k) {
      return false;
    }

    let count = 0;
    for (let i = 0; i < this.k; i++) {
      if (this.stream[i] !== this.value) {
        break;
      }
      count++;
    }

    return count === this.k;
  }
}

#################################################################################
