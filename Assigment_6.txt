Question: 1

code in javascript without explantion A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:

- s[i] == 'I' if perm[i] < perm[i + 1], and
- s[i] == 'D' if perm[i] > perm[i + 1].

Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return **any of them**.

**Example 1:**

**Input:** s = "IDID"

**Output:**

[0,4,1,3,2]


///////
Answer

function reconstructPermutation(s) {
  const n = s.length;
  let perm = [];
  let low = 0;
  let high = n;

  for (let i = 0; i <= n; i++) {
    if (i === n || s[i] === 'I') {
      for (let j = i; j >= low; j--) {
        perm.push(high);
        high--;
      }
      low = i + 1;
    } else {
      high--;
    }
  }

  return perm;
}

// Test case
const s = "IDID";
const result = reconstructPermutation(s);
console.log(result);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Question :2


You are given an m x n integer matrix matrix with the following two properties:

- Each row is sorted in non-decreasing order.
- The first integer of each row is greater than the last integer of the previous row.

Given an integer target, return true *if* target *is in* matrix *or* false *otherwise*.


///////
Answer

function searchMatrix(matrix, target) {
  if (!matrix || matrix.length === 0 || matrix[0].length === 0) {
    return false;
  }

  const rows = matrix.length;
  const cols = matrix[0].length;

  let low = 0;
  let high = rows * cols - 1;

  while (low <= high) {
    const mid = Math.floor((low + high) / 2);
    const num = matrix[Math.floor(mid / cols)][mid % cols];

    if (num === target) {
      return true;
    } else if (num < target) {
      low = mid + 1;
    } else {
      high = mid - 1;
    }
  }

  return false;
}

// Test case
const matrix = [
  [1, 3, 5, 7],
  [10, 11, 16, 20],
  [23, 30, 34, 60]
];
const target = 3;
const result = searchMatrix(matrix, target);
console.log(result);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Question :3


Given an array of integers arr, return *true if and only if it is a valid mountain array*.

Recall that arr is a mountain array if and only if:

- arr.length >= 3
- There exists some i with 0 < i < arr.length - 1 such that:
    - arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
    - arr[i] > arr[i + 1] > ... > arr[arr.length - 1]


///////
Answer

function validMountainArray(arr) {
  const n = arr.length;
  let i = 0;

  // Check for increasing sequence
  while (i + 1 < n && arr[i] < arr[i + 1]) {
    i++;
  }

  // Peak should not be the first or last element
  if (i === 0 || i === n - 1) {
    return false;
  }

  // Check for decreasing sequence
  while (i + 1 < n && arr[i] > arr[i + 1]) {
    i++;
  }

  return i === n - 1;
}

// Test case
const arr = [2, 1];
const result = validMountainArray(arr);
console.log(result);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Question :4


Given a binary array nums, return *the maximum length of a contiguous subarray with an equal number of* 0 *and* 1.

**Example 1:**

**Input:** nums = [0,1]

**Output:** 2

**Explanation:**

[0, 1] is the longest contiguous subarray with an equal number of 0 and 1.


///////
Answer


function findMaxLength(nums) {
  const n = nums.length;
  let maxLength = 0;
  let count = 0;
  const countMap = new Map();
  countMap.set(0, -1);

  for (let i = 0; i < n; i++) {
    count += nums[i] === 0 ? -1 : 1;

    if (countMap.has(count)) {
      maxLength = Math.max(maxLength, i - countMap.get(count));
    } else {
      countMap.set(count, i);
    }
  }

  return maxLength;
}

// Test case
const nums = [0, 1];
const result = findMaxLength(nums);
console.log(result);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Question :5


The **product sum** of two equal-length arrays a and b is equal to the sum of a[i] * b[i] for all 0 <= i < a.length (**0-indexed**).

- For example, if a = [1,2,3,4] and b = [5,2,3,1], the **product sum** would be 1*5 + 2*2 + 3*3 + 4*1 = 22.

Given two arrays nums1 and nums2 of length n, return *the **minimum product sum** if you are allowed to **rearrange** the **order** of the elements in* nums1.


///////
Answer

function minProductSum(nums1, nums2) {
  const n = nums1.length;

  nums1.sort((a, b) => a - b);
  nums2.sort((a, b) => b - a);

  let minProductSum = 0;

  for (let i = 0; i < n; i++) {
    minProductSum += nums1[i] * nums2[i];
  }

  return minProductSum;
}

// Test case
const nums1 = [5, 3, 4, 2];
const nums2 = [4, 2, 2, 5];
const result = minProductSum(nums1, nums2);
console.log(result);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Question :6


An integer array original is transformed into a **doubled** array changed by appending **twice the value** of every element in original, and then randomly **shuffling** the resulting array.

Given an array changed, return original *if* changed *is a **doubled** array. If* changed *is not a **doubled** array, return an empty array. The elements in* original *may be returned in **any** order*.


///////
Answer

function findOriginalArray(changed) {
  const n = changed.length;

  if (n % 2 !== 0) {
    return [];
  }

  const original = [];
  const countMap = new Map();

  // Count the frequency of each element in changed array
  for (const num of changed) {
    countMap.set(num, (countMap.get(num) || 0) + 1);
  }

  // Process each element in changed array
  changed.sort((a, b) => a - b);
  for (const num of changed) {
    if (countMap.get(num) === 0) {
      continue;
    }

    const doubledNum = num * 2;

    if (countMap.get(doubledNum) === 0) {
      return [];
    }

    original.push(num);
    countMap.set(num, countMap.get(num) - 1);
    countMap.set(doubledNum, countMap.get(doubledNum) - 1);
  }

  return original;
}

// Test case
const changed = [1, 3, 4, 2, 6, 8];
const result = findOriginalArray(changed);
console.log(result);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Question :7

Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.



///////
Answer

function generateMatrix(n) {
  const matrix = new Array(n).fill().map(() => new Array(n).fill(0));

  let num = 1;
  let top = 0;
  let bottom = n - 1;
  let left = 0;
  let right = n - 1;

  while (num <= n * n) {
    for (let i = left; i <= right; i++) {
      matrix[top][i] = num;
      num++;
    }
    top++;

    for (let i = top; i <= bottom; i++) {
      matrix[i][right] = num;
      num++;
    }
    right--;

    if (top <= bottom) {
      for (let i = right; i >= left; i--) {
        matrix[bottom][i] = num;
        num++;
      }
      bottom--;
    }

    if (left <= right) {
      for (let i = bottom; i >= top; i--) {
        matrix[i][left] = num;
        num++;
      }
      left++;
    }
  }

  return matrix;
}

// Test case
const n = 3;
const result = generateMatrix(n);
console.log(result);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Question :8


Given two sparse matrices mat1 of size m x k and mat2 of size k x n, return the result of mat1 x mat2. You may assume that multiplication is always possible.


///////
Answer



function multiply(mat1, mat2) {
  const m = mat1.length;    // Number of rows in mat1
  const k = mat1[0].length; // Number of columns in mat1
  const n = mat2[0].length; // Number of columns in mat2

  // Initialize the result matrix with zeros
  const result = new Array(m).fill().map(() => new Array(n).fill(0));

  // Perform matrix multiplication
  for (let i = 0; i < m; i++) {
    for (let j = 0; j < n; j++) {
      for (let x = 0; x < k; x++) {
        result[i][j] += mat1[i][x] * mat2[x][j];
      }
    }
  }

  return result;
}

// Test case
const mat1 = [[1, 0, 0], [-1, 0, 3]];
const mat2 = [[7, 0, 0], [0, 0, 0], [0, 0, 1]];
const result = multiply(mat1, mat2);
console.log(result);





