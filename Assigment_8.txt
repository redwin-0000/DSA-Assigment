Question:1


Given two strings s1 and s2, return the lowest ASCII sum of deleted characters to make two strings equal.

//////////
Answer

function minimumDeleteSum(s1, s2) {
  const m = s1.length;
  const n = s2.length;


  const dp = new Array(m + 1).fill().map(() => new Array(n + 1).fill(0));


  for (let i = 1; i <= m; i++) {
    dp[i][0] = dp[i - 1][0] + s1.charCodeAt(i - 1);
  }

  for (let j = 1; j <= n; j++) {
    dp[0][j] = dp[0][j - 1] + s2.charCodeAt(j - 1);
  }

  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      if (s1.charAt(i - 1) === s2.charAt(j - 1)) {
        dp[i][j] = dp[i - 1][j - 1];
      } else {
        dp[i][j] = Math.min(
          dp[i - 1][j] + s1.charCodeAt(i - 1),
          dp[i][j - 1] + s2.charCodeAt(j - 1)
        );
      }
    }
  }

  return dp[m][n];
}

// Test case
const s1 = "sea";
const s2 = "eat";
const result = minimumDeleteSum(s1, s2);
console.log(result);



//////////////////////////////////////////////////////////////////////////////////////////////////////////////

Question:2

Given a string s containing only three types of characters: '(', ')' and '*', return true *if* s *is **valid***.

The following rules define a **valid** string:

- Any left parenthesis '(' must have a corresponding right parenthesis ')'.
- Any right parenthesis ')' must have a corresponding left parenthesis '('.
- Left parenthesis '(' must go before the corresponding right parenthesis ')'.
- '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".


//////////
Answer

function checkValidString(s) {
  let leftStack = [];
  let starStack = [];

  for (let i = 0; i < s.length; i++) {
    const char = s.charAt(i);

    if (char === '(') {
      leftStack.push(i);
    } else if (char === '*') {
      starStack.push(i);
    } else {
      if (leftStack.length > 0) {
        leftStack.pop();
      } else if (starStack.length > 0) {
        starStack.pop();
      } else {
        return false;
      }
    }
  }

  while (leftStack.length > 0 && starStack.length > 0) {
    if (leftStack[leftStack.length - 1] > starStack[starStack.length - 1]) {
      return false;
    }
    leftStack.pop();
    starStack.pop();
  }

  return leftStack.length === 0;
}

// Test case
const s = "()";
const result = checkValidString(s);
console.log(result);



//////////////////////////////////////////////////////////////////////////////////////////////////////////////

Question:3


Given two strings word1 and word2, return *the minimum number of **steps** required to make* word1 *and* word2 *the same*.

In one **step**, you can delete exactly one character in either string.

//////////
Answer

function minDistance(word1, word2) {
  const m = word1.length;
  const n = word2.length;

  // Create a 2D array to store the minimum number of steps
  const dp = new Array(m + 1).fill().map(() => new Array(n + 1).fill(0));

  // Fill the first row and column of dp
  for (let i = 0; i <= m; i++) {
    dp[i][0] = i;
  }
  for (let j = 0; j <= n; j++) {
    dp[0][j] = j;
  }

  // Calculate the minimum number of steps
  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      if (word1[i - 1] === word2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1];
      } else {
        dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;
      }
    }
  }

  return dp[m][n];
}

// Test case
const word1 = "sea";
const word2 = "eat";
const result = minDistance(word1, word2);
console.log(result);



//////////////////////////////////////////////////////////////////////////////////////////////////////////////

Question:4


You need to construct a binary tree from a string consisting of parenthesis and integers.

The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.
You always start to construct the **left** child node of the parent first if it exists.

//////////
Answer


function TreeNode(val, left, right) {
  this.val = val;
  this.left = left;
  this.right = right;
}

function constructBinaryTree(s) {
  if (!s || s.length === 0) {
    return null;
  }

  const stack = [];

  for (let i = 0; i < s.length; i++) {
    const char = s.charAt(i);

    if (char === '(') {
      // Start of a new subtree
      stack.push(currNode);
      currNode = null;
    } else if (char === ')') {
      // End of a subtree
      const parent = stack.pop();

      if (parent.left) {
        parent.right = currNode;
      } else {
        parent.left = currNode;
      }

      currNode = parent;
    } else {
      // Constructing a new node
      let j = i;

      while (j < s.length && s.charAt(j) !== '(' && s.charAt(j) !== ')') {
        j++;
      }

      const val = parseInt(s.substring(i, j));
      const newNode = new TreeNode(val, null, null);

      if (!currNode) {
        currNode = newNode;
      } else {
        if (currNode.left) {
          currNode.right = newNode;
        } else {
          currNode.left = newNode;
        }
      }

      i = j - 1;
    }
  }

  return currNode;
}

// Test case
const s = "4(2(3)(1))(6(5))";
const tree = constructBinaryTree(s);
console.log(tree);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////

Question:5


Given an array of characters chars, compress it using the following algorithm:

Begin with an empty string s. For each group of **consecutive repeating characters** in chars:

- If the group's length is 1, append the character to s.
- Otherwise, append the character followed by the group's length.

The compressed string s **should not be returned separately**, but instead, be stored **in the input character array chars**. Note that group lengths that are 10 or longer will be split into multiple characters in chars.

After you are done **modifying the input array,** return *the new length of the array*.

You must write an algorithm that uses only constant extra space.

//////////
Answer

function compress(chars) {
  let count = 1;
  let index = 0;

  for (let i = 1; i <= chars.length; i++) {
    if (i < chars.length && chars[i] === chars[i - 1]) {
      count++;
    } else {
      chars[index] = chars[i - 1];
      index++;

      if (count > 1) {
        const countChars = String(count).split('');

        for (const char of countChars) {
          chars[index] = char;
          index++;
        }
      }

      count = 1;
    }
  }

  return index;
}

// Test case
const chars = ["a", "a", "b", "b", "c", "c", "c"];
const compressedLength = compress(chars);
console.log(compressedLength);
console.log(chars.slice(0, compressedLength));



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
Question:6

Given two strings s and p, return *an array of all the start indices of* p*'s anagrams in* s. You may return the answer in **any order**.

An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

//////////
Answer

function findAnagrams(s, p) {
  const result = [];
  const pMap = new Map();

  // Create a frequency map for string p
  for (const char of p) {
    pMap.set(char, (pMap.get(char) || 0) + 1);
  }

  let left = 0;
  let right = 0;
  let count = p.length;

  while (right < s.length) {
    // Expand the sliding window
    const char = s[right];

    if (pMap.has(char)) {
      pMap.set(char, pMap.get(char) - 1);
      if (pMap.get(char) >= 0) {
        count--;
      }
    }

    right++;

    // Contract the sliding window
    if (right - left === p.length) {
      if (count === 0) {
        result.push(left);
      }

      const leftChar = s[left];
      if (pMap.has(leftChar)) {
        pMap.set(leftChar, pMap.get(leftChar) + 1);
        if (pMap.get(leftChar) > 0) {
          count++;
        }
      }

      left++;
    }
  }

  return result;
}

// Test case
const s = "cbaebabacd";
const p = "abc";
const result = findAnagrams(s, p);
console.log(result);



//////////////////////////////////////////////////////////////////////////////////////////////////////////////

Question:7

Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

//////////
Answer

function decodeString(s) {
  const stack = [];

  for (let i = 0; i < s.length; i++) {
    const char = s.charAt(i);

    if (char === ']') {
      let currentStr = '';

      while (stack.length > 0 && stack[stack.length - 1] !== '[') {
        currentStr = stack.pop() + currentStr;
      }

      stack.pop(); // Remove '['

      let count = '';

      while (stack.length > 0 && !isNaN(stack[stack.length - 1])) {
        count = stack.pop() + count;
      }

      count = parseInt(count);

      const decodedStr = currentStr.repeat(count);
      stack.push(decodedStr);
    } else {
      stack.push(char);
    }
  }

  return stack.join('');
}

// Test case
const s = "3[a]2[bc]";
const result = decodeString(s);
console.log(result);



//////////////////////////////////////////////////////////////////////////////////////////////////////////////

Question:8

Given two strings s and goal, return true *if you can swap two letters in* s *so the result is equal to* goal*, otherwise, return* false*.*

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].

//////////
Answer


function buddyStrings(s, goal) {
  if (s.length !== goal.length) {
    return false;
  }

  if (s === goal) {
    const charCount = new Map();

    for (const char of s) {
      if (charCount.has(char)) {
        return true; // If there are duplicate characters, we can swap them
      }

      charCount.set(char, 1);
    }

    return false; // No duplicate characters to swap
  }

  const indices = [];

  for (let i = 0; i < s.length; i++) {
    if (s.charAt(i) !== goal.charAt(i)) {
      indices.push(i);
    }

    if (indices.length > 2) {
      return false; // More than 2 indices differ, cannot be swapped
    }
  }

  return indices.length === 2 && s.charAt(indices[0]) === goal.charAt(indices[1]) && s.charAt(indices[1]) === goal.charAt(indices[0]);
}

// Test case
const s = "ab";
const goal = "ba";
const result = buddyStrings(s, goal);
console.log(result);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
