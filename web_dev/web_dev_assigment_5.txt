Question_1


What’s difference between Synchronous and Asynchronous?


Answer

The main difference between synchronous and asynchronous is how tasks or processes are handled in relation to time.

Synchronous operations require tasks to be executed in a sequential and blocking manner. In other words, one task must wait for the previous task to complete before it can start. It operates in real-time and requires immediate responses.

On the other hand, asynchronous operations allow tasks to be executed independently and non-blocking. Each task can start and run concurrently, without waiting for the previous task to finish. Asynchronous operations do not rely on real-time responses and are commonly used for time-consuming or resource-intensive tasks.


In summary, synchronous operations follow a sequential and blocking approach, while asynchronous operations allow tasks to be executed concurrently and non-blocking.

############################################################################################################################################

Question_2


Answer of this question in short What are Web Apis ?


Answer

Web APIs (Application Programming Interfaces) are sets of rules and protocols that allow different software applications to communicate and interact with each other over the internet. They provide a standardized way for applications to request and exchange data.

Web APIs are specifically designed for web development and enable developers to access and manipulate various resources and services available on the internet. These resources can include retrieving or sending data, performing operations, accessing functionality, and more.

Web APIs often utilize the HTTP (Hypertext Transfer Protocol) as the underlying protocol for communication. They typically follow a request-response model, where a client application sends a request to the API, and the API responds with the requested data or performs the specified action.

By using web APIs, developers can leverage the functionality and data of external services, such as social media platforms, weather services, payment gateways, and databases, to enhance their own applications or build new ones. This allows for greater integration and interoperability between different software systems on the web.


############################################################################################################################################

Question_3


Explain SetTimeOut and setInterval ?


Answer

setTimeout and setInterval are JavaScript functions used for executing code at specified intervals or after a certain delay.

setTimeout is a function that executes a specified function or evaluates a provided expression once after a specified delay. It takes two parameters: the function or expression to be executed and the delay in milliseconds. After the specified delay, the code is executed once and then stops.

 Here's an example:

setTimeout(function() {
  console.log("Delayed code execution after 2000 milliseconds");
}, 2000);





setInterval is similar to setTimeout, but instead of executing the code once, it repeatedly executes the specified function or evaluates the expression at a given interval. It also takes two parameters: the function or expression to be executed and the interval in milliseconds.

 Here's an example:

setInterval(function() {
  console.log("Code executed every 1000 milliseconds");
}, 1000);





############################################################################################################################################

Question_4

how can you handle Async code in JavaScript ?



Answer

In JavaScript, there are two common ways to work with asynchronous operations: then/catch method chaining and async/await. Both methods can be used to handle promises, which are objects that represent the eventual completion (or failure) of an asynchronous operation.


############################################################################################################################################

Question_5


What are Callbacks &  Callback Hell ?


Answer
The callback function passed is used to sum up the elements of the array. After 2 seconds have passed, the sum of the array is printed which is 9.


Callback Hell: Callback Hell is essentially nested callbacks stacked below one another forming a pyramid structure.

Callback Hell: Callback Hell is essentially nested callbacks stacked below one another forming a pyramid structure. Every callback depends/waits for the previous callback, thereby making a pyramid structure that affects the readability and maintainability of the code. 


############################################################################################################################################

Question_6

What are Promises & Explain Some Three Methods of Promise



Answer

Promises are a feature in JavaScript that allow for more elegant and efficient handling of asynchronous operations. They provide a way to handle the results (fulfilled value) or errors (rejected reason) of an asynchronous operation when it completes.

Promises have three main states:

Pending: The initial state when a promise is created and hasn't settled yet.
Fulfilled: The state when a promise successfully resolves with a value.
Rejected: The state when a promise encounters an error or fails to fulfill.

1_then: This method is used to handle the fulfillment of a promise. It takes two optional callback functions as arguments: onFulfilled and onRejected. The onFulfilled function is executed when the promise is successfully fulfilled, and it receives the fulfilled value as an argument. The onRejected function is executed when the promise is rejected, and it receives the rejection reason as an argument. Here's an example:

myPromise.then(
  function(result) {
    console.log("Promise fulfilled with result:", result);
  },
  function(error) {
    console.log("Promise rejected with error:", error);
  }
);

2_catch: This method is used to handle promise rejections. It is similar to the onRejected callback of the then method but is specifically designed to handle only rejections. It simplifies error handling by providing a convenient way to catch and handle errors. Here's an example:

myPromise.catch(function(error) {
  console.log("Promise rejected with error:", error);
});

3_finally: This method is used to specify a callback function that will be executed regardless of whether the promise is fulfilled or rejected. It allows you to perform cleanup tasks or finalize operations that need to be done in both success and error scenarios. Here's an example:

myPromise.finally(function() {
  console.log("Promise completed.");
});



############################################################################################################################################

Question_7


What’s async & await Keyword in JavaScript


Answer

The async and await keywords are features introduced in JavaScript to simplify and improve the handling of asynchronous code. They work together to make asynchronous operations appear more synchronous and easier to read and write.

The async keyword is used to declare an asynchronous function. When a function is marked as async, it automatically returns a promise. This allows you to use the await keyword within the function to pause its execution until a promise is fulfilled or rejected. 

async function fetchData() {
  try {
    const response = await fetch('https://api.example.com/data');
    const data = await response.json();
    console.log('Data:', data);
  } catch (error) {
    console.log('Error:', error);
  }
}



############################################################################################################################################

Question_8


Explain Purpose of Try and Catch Block & Why do we need it?


Answer


The try and catch blocks are used in JavaScript for error handling and to gracefully handle exceptions that may occur during the execution of a code block.

The purpose of the try block is to enclose the code that might throw an exception or generate an error. It allows you to define a section of code where you anticipate potential errors or exceptions. If an error occurs within the try block, the normal flow of execution is interrupted, and the control is transferred to the corresponding catch block.

The catch block is responsible for catching and handling the exceptions thrown within the try block. It allows you to specify the actions or behavior to be taken when an exception occurs. The catch block receives the exception object as an argument, which provides information about the error, such as the error message.

The main reasons for using try and catch blocks are:

Error handling: By wrapping potentially error-prone code within a try block, you can prevent the application from crashing and handle the error gracefully. It gives you the opportunity to handle exceptions and take appropriate actions, such as displaying an error message, logging the error, or providing fallback behavior.

Program flow control: try and catch blocks allow you to control the flow of your program when an error occurs. Instead of abrupt termination, you can catch the error, execute alternative code paths, or continue with the execution after the catch block.

Debugging and troubleshooting: try and catch blocks help in identifying and diagnosing errors during development and testing. When an error occurs, you can use the catch block to log or display relevant information about the error, aiding in the debugging process.

Overall, try and catch blocks provide a mechanism to handle and recover from errors, allowing for more robust and reliable code. They enable you to gracefully handle exceptions and ensure that unexpected errors don't disrupt the normal execution of your program.

############################################################################################################################################

Question_9

Explain fetch



Answer

Fetch is the retrieval of data by a software program, script, or hardware device. After being retrieved, the data is moved to an alternate location or displayed on a screen.


############################################################################################################################################

Question_10


How do you define an asynchronous function in JavaScript using async/await?

Answer

By declaring a function as async, you indicate that it will contain asynchronous operations and will return a promise implicitly. The async keyword allows you to use the await keyword within the function to pause the execution until a promise is fulfilled or rejected.

Here's an example of an asynchronous function that uses async/await to handle asynchronous operations:


async function fetchData() {
  try {
    const response = await fetch('https://api.example.com/data');
    const data = await response.json();
    console.log('Data:', data);
  } catch (error) {
    console.log('Error:', error);
  }
}



############################################################################################################################################
