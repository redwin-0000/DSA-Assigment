question_1
Explain Hoisting in JavaScript


Answer:
In JavaScript, Hoisting is the default behavior of moving all the declarations at the top of the scope before code execution. Basically, it gives us an advantage that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local. 


example:
sayHello(); 

function sayHello() {
  console.log("Hello!");
}

//output: Hello!

################################################################################################################################################################

Question_2

Explain Temporal Dead Zone?


Answer :

The Temporal Dead Zone (TDZ) is a behavior in JavaScript that occurs when trying to access a variable before it is declared, but within its lexical scope. It is a period of time between the start of the scope and the point where the variable is declared, during which accessing the variable results in a reference error.

example:
let x;
console.log(x); // undefined
x = 10;
console.log(x); // 10


#############################################################################################################################################################


Question_3


Difference between var & let?



Answer:

The difference between let and var is in the scope of the variables they create:

1_ Variables declared by let are only available inside the block where they’re defined.
2_ Variables declared by var are available throughout the function in which they’re declared.


example:

function varScoping() {
  var x = 1;

  if (true) {
    var x = 2;
    console.log(x);
  }

  console.log(x); 
}

function letScoping() {
  let x = 1;

  if (true) {
    let x = 2;
    console.log(x); 
  }

  console.log(x);
}

###################################################################################################################################################################33

Question_4



 What are the major features introduced in ECMAScript 6?

Answer

ES6 comes with significant changes to the JavaScript language. It brought several new features like, let and const keyword, rest and spread operators, template literals, classes, modules and many other enhancements to make JavaScript programming easier and more fun. In this article, we will discuss some of the best and most popular ES6 features that we can use in your everyday JavaScript coding.

let and const Keywords
Arrow Functions
Multi-line Strings
Default Parameters
Template Literals
Destructuring Assignment
Enhanced Object Literals
Promises
Classes
Modules



#######################################################################################################################################################################33

Question_5

 What is the difference between let and const ?


Answer

var and let create variables that can be reassigned another value.
const creates "constant" variables that cannot be reassigned another value.
developers shouldn't use var anymore. They should use let or const instead.
if you're not going to change the value of a variable, it is good practice to use const.

##################################################################################################################################################################
question_6


What is template literals in ES6 and how do you use them?


Answer


Template literals are a new feature introduced in ECMAScript 2015/ ES6. It provides an easy way to create multiline strings and perform string interpolation. Template literals are the string literals and allow embedded expressions.



syntex


var str = `string value`;  


#####################################################################################################################################################################

Question_7

What’s difference between map & forEach?


Answer


The map() and forEach() methods are both array methods in JavaScript used for iterating over arrays and performing operations on their elements. While they may seem similar, there are some key differences between the two:

Return Value:
The map() method returns a new array containing the results of applying a given function to each element of the original array. It creates a new array by transforming each element based on the provided function. The length of the returned array will be the same as the original array.
The forEach() method, on the other hand, does not return anything. It simply iterates over the array and executes a provided function on each element. It is primarily used for its side effects, such as modifying the original array or performing some action on each element.

Modifying the Original Array:
map() does not modify the original array. Instead, it creates a new array with the transformed elements. The original array remains unchanged.
forEach(), in contrast, does not create a new array, but it allows you to modify the original array elements or perform any other side effects within the provided function.

Usage of Returned Values:
Since map() returns a new array, you can store the result in a variable and use it later. The transformed array can be used in further operations or assigned to a new variable.
Since forEach() does not return anything, it is typically used when you want to perform an action on each element of an array but do not require a transformed array as the output.



example:



const numbers = [1, 2, 3, 4, 5];

// Using map()
const squaredNumbers = numbers.map(num => num * num);
console.log(squaredNumbers); // [1, 4, 9, 16, 25]

// Using forEach()
numbers.forEach(num => console.log(num * num)); // 1 4 9 16 25




#################################################################################################################################################

Question_8

 How can you destructure objects and arrays in ES6?

Answer



Destructuring means to break down a complex structure into simpler parts. With the syntax of destructuring, you can extract smaller fragments from objects and arrays. It can be used for assignments and declaration of a variable.

Destructuring is an efficient way to extract multiple values from data that is stored in arrays or objects. When destructuring an array, we use their positions (or index) in an assignment.




example:


var arr = ["Hello", "World"]  
  
// destructuring assignment  
var [first, second] = arr;  
  
console.log(first); // Hello  
console.log(second); // World  




################################################################################################################################################33

Question_9

How can you define default parameter values in ES6 functions?


Answer

A function that automatically provides default values for undeclared parameters can be a beneficial safeguard for your programs, and this is nothing new.


function getInfo (name, year, color) {
  year = (typeof year !== 'undefined') ? year : 2018;
  color = (typeof color !== 'undefined') ? color : 'Blue';
  // remainder of the function...
}


getInfo('Chevy', 1957, 'Green');
getInfo('Benz', 1965); // default for color is "Blue"
getInfo('Honda'); // defaults are 2018 and "Blue"



########################################################################################################################################################

Question_10

What is the purpose of the spread operator (...) in ES6?


Answer

The JavaScript spread operator (...) allows us to quickly copy all or part of an existing array or object into another array or object.


const numbers = [1, 2, 3];
const expandedArray = [...numbers, 4, 5];
console.log(expandedArray); // [1, 2, 3, 4, 5]














































































